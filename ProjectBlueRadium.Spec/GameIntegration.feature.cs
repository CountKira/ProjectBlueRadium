// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProjectBlueRadium.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GameIntegrationFeature : Xunit.IClassFixture<GameIntegrationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GameIntegration.feature"
#line hidden
        
        public GameIntegrationFeature(GameIntegrationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameIntegration", "\tRun the game as an integration test to find error on the top level", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("I start a new game in the test dungeon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Drink from poisonous bottle")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Drink from poisonous bottle")]
        public virtual void DrinkFromPoisonousBottle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drink from poisonous bottle", null, ((string[])(null)));
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 8
 testRunner.When("I enter drink bottle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("I die by poison", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("The game is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Character knows no spells at the beginning")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Character knows no spells at the beginning")]
        public virtual void CharacterKnowsNoSpellsAtTheBeginning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character knows no spells at the beginning", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 13
 testRunner.When("I enter spells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("I do not know any spells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Pick up bottle where case is unimportant")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Pick up bottle where case is unimportant")]
        [Xunit.InlineDataAttribute("get bottle", "bottle", new string[0])]
        [Xunit.InlineDataAttribute("get Bottle", "bottle", new string[0])]
        public virtual void PickUpBottleWhereCaseIsUnimportant(string command, string item, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pick up bottle where case is unimportant", null, exampleTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 17
 testRunner.When(string.Format("I enter {0}", command), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then(string.Format("I got {0}", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Looking at different items")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking at different items")]
        [Xunit.InlineDataAttribute("look bottle", "This is a glass bottle, with a green substance inside it.", new string[0])]
        [Xunit.InlineDataAttribute("look book", "The book contains the story of boatmurdered.", new string[0])]
        [Xunit.InlineDataAttribute("go west,look sword", "A sharp sword.", new string[0])]
        public virtual void LookingAtDifferentItems(string commands, string itemName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking at different items", null, exampleTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 26
 testRunner.When(string.Format("I enter multiple {0}", commands), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then(string.Format("The output text shows {0}", itemName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Getting different item")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Getting different item")]
        [Xunit.InlineDataAttribute("get bottle", "bottle", new string[0])]
        [Xunit.InlineDataAttribute("get book", "book", new string[0])]
        [Xunit.InlineDataAttribute("go west,get sword", "sword", new string[0])]
        public virtual void GettingDifferentItem(string commands, string itemName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting different item", null, exampleTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 36
 testRunner.When(string.Format("I enter multiple {0}", commands), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then(string.Format("I got {0}", itemName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Game ends when entering exit")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Game ends when entering exit")]
        public virtual void GameEndsWhenEnteringExit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Game ends when entering exit", null, ((string[])(null)));
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 46
 testRunner.When("I enter exit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("The game is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="When I try to get the same item twice I entered an invalid command")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "When I try to get the same item twice I entered an invalid command")]
        [Xunit.InlineDataAttribute("book", new string[0])]
        [Xunit.InlineDataAttribute("bottle", new string[0])]
        public virtual void WhenITryToGetTheSameItemTwiceIEnteredAnInvalidCommand(string itemName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I try to get the same item twice I entered an invalid command", null, exampleTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 50
 testRunner.When(string.Format("I enter get {0}", itemName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.And(string.Format("I enter get {0}", itemName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.Then(string.Format("The item {0} can not be found", itemName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The endboss has a description")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "The endboss has a description")]
        public virtual void TheEndbossHasADescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The endboss has a description", null, ((string[])(null)));
#line 59
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 60
 testRunner.When("I enter go north", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.And("I enter look evil guy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.Then("The output text shows The evil threat of the campaign.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking at myself")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking at myself")]
        public virtual void LookingAtMyself()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking at myself", null, ((string[])(null)));
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 65
 testRunner.When("I enter me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("I see a description of myself", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking at picked up book shows its content")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking at picked up book shows its content")]
        public virtual void LookingAtPickedUpBookShowsItsContent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking at picked up book shows its content", null, ((string[])(null)));
#line 68
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 69
 testRunner.When("I enter get book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.And("I enter look book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.Then("The output text shows The book contains the story of boatmurdered.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Can learn spells")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Can learn spells")]
        public virtual void CanLearnSpells()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can learn spells", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 74
 testRunner.When("I enter read fireball spell book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("I have learned fireball", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.When("I enter spells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("I know spells", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Entering an unknown command")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Entering an unknown command")]
        public virtual void EnteringAnUnknownCommand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entering an unknown command", null, ((string[])(null)));
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 80
 testRunner.When("I enter an unknown command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.Then("The command is unknown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Attacking the end boss without anything ends the game")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Attacking the end boss without anything ends the game")]
        public virtual void AttackingTheEndBossWithoutAnythingEndsTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attacking the end boss without anything ends the game", null, ((string[])(null)));
#line 83
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 84
 testRunner.When("I enter go north", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I enter attack evil guy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("The output text shows Since you do not wield any weapons, the evil guy can easily" +
                    " kill you.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("The game is over", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A Book that is not in the same room can not be read")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "A Book that is not in the same room can not be read")]
        public virtual void ABookThatIsNotInTheSameRoomCanNotBeRead()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Book that is not in the same room can not be read", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 90
 testRunner.When("I enter go north", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.And("I enter read fireball spell book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.Then("The item fireball spell book can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Can not go into a non existing room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Can not go into a non existing room")]
        public virtual void CanNotGoIntoANonExistingRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not go into a non existing room", null, ((string[])(null)));
#line 94
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 95
 testRunner.When("I enter go saberwooky", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
 testRunner.Then("The passage saberwooky can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking at an item that does not exist can not be found")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking at an item that does not exist can not be found")]
        public virtual void LookingAtAnItemThatDoesNotExistCanNotBeFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking at an item that does not exist can not be found", null, ((string[])(null)));
#line 98
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 99
 testRunner.When("I enter look sasquatchIsMyFather", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("The entity sasquatchIsMyFather can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The bad evil guy can only be attacked when the player is in the same room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "The bad evil guy can only be attacked when the player is in the same room")]
        public virtual void TheBadEvilGuyCanOnlyBeAttackedWhenThePlayerIsInTheSameRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The bad evil guy can only be attacked when the player is in the same room", null, ((string[])(null)));
#line 102
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 103
 testRunner.When("I enter attack evil guy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
 testRunner.Then("The entity evil guy can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try drinking from not available bottle")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Try drinking from not available bottle")]
        public virtual void TryDrinkingFromNotAvailableBottle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try drinking from not available bottle", null, ((string[])(null)));
#line 106
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 107
 testRunner.When("I enter go north", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.And("I enter drink bottle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.Then("The item bottle can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.And("The game is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking into the main room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking into the main room")]
        public virtual void LookingIntoTheMainRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking into the main room", null, ((string[])(null)));
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 113
 testRunner.When("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("The room is described as \"You are in an empty room. The walls are smooth.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.And("I see the items \"bottle,book,fireball spell book\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("I see the passages \"north,west\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking into the room north")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking into the room north")]
        public virtual void LookingIntoTheRoomNorth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking into the room north", null, ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 119
 testRunner.When("I enter go north", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.And("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.Then("The room is described as \"You are in a dark room.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.And("I see no items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("I see the passages \"south\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("I see the creature \"Evil guy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Looking into the room west")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Looking into the room west")]
        public virtual void LookingIntoTheRoomWest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Looking into the room west", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 127
 testRunner.When("I enter go west", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.And("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.Then("The room is described as \"You are in a bright room.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 130
 testRunner.And("I see the items \"sword,shield\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("I see the passage \"east\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Leaving the main room and then going back gives the description of the main room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Leaving the main room and then going back gives the description of the main room")]
        public virtual void LeavingTheMainRoomAndThenGoingBackGivesTheDescriptionOfTheMainRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Leaving the main room and then going back gives the description of the main room", null, ((string[])(null)));
#line 133
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 134
 testRunner.When("I enter go west", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.And("I enter go east", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.Then("The room is described as \"You are in an empty room. The walls are smooth.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.And("I see the items \"bottle,book,fireball spell book\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("I see the passages \"north,west\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="When i pick up some items they are in my inventory")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "When i pick up some items they are in my inventory")]
        public virtual void WhenIPickUpSomeItemsTheyAreInMyInventory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When i pick up some items they are in my inventory", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 142
 testRunner.When("I enter get bottle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.And("I enter get book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("I enter inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.Then("I have \"bottle,book\" in my inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The character does not have any items at the beginning of the game")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "The character does not have any items at the beginning of the game")]
        public virtual void TheCharacterDoesNotHaveAnyItemsAtTheBeginningOfTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The character does not have any items at the beginning of the game", null, ((string[])(null)));
#line 147
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 148
 testRunner.When("I enter inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("I have no items in my inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="When a character takes an item out of the room it can not be seen in the room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "When a character takes an item out of the room it can not be seen in the room")]
        [Xunit.InlineDataAttribute("book", "bottle,fireball spell book", new string[0])]
        [Xunit.InlineDataAttribute("bottle", "book,fireball spell book", new string[0])]
        public virtual void WhenACharacterTakesAnItemOutOfTheRoomItCanNotBeSeenInTheRoom(string item, string remainingItems, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When a character takes an item out of the room it can not be seen in the room", null, exampleTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 152
 testRunner.When(string.Format("I enter get {0}", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.And("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.Then(string.Format("I see the items \"{0}\"", remainingItems), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="When the player gets all the items he can see no items in the room")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "When the player gets all the items he can see no items in the room")]
        public virtual void WhenThePlayerGetsAllTheItemsHeCanSeeNoItemsInTheRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When the player gets all the items he can see no items in the room", null, ((string[])(null)));
#line 161
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 162
 testRunner.When("I enter get book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.And("I enter get bottle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("I enter get fireball spell book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("I enter look", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.Then("I see no items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="At the start of the game the character has nothing equipped")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "At the start of the game the character has nothing equipped")]
        public virtual void AtTheStartOfTheGameTheCharacterHasNothingEquipped()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("At the start of the game the character has nothing equipped", null, ((string[])(null)));
#line 168
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 169
 testRunner.When("I enter equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
 testRunner.Then("I have nothing equipped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="When I equip a item it shows up in the equippment")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "When I equip a item it shows up in the equippment")]
        [Xunit.InlineDataAttribute("sword", new string[0])]
        [Xunit.InlineDataAttribute("shield", new string[0])]
        public virtual void WhenIEquipAItemItShowsUpInTheEquippment(string item, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I equip a item it shows up in the equippment", null, exampleTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 173
 testRunner.When("I enter go west", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.And(string.Format("I enter get {0}", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.And(string.Format("I enter equip {0}", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("I enter equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.Then(string.Format("I have {0} equipped", item), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Can not equip non existent item")]
        [Xunit.TraitAttribute("FeatureTitle", "GameIntegration")]
        [Xunit.TraitAttribute("Description", "Can not equip non existent item")]
        public virtual void CanNotEquipNonExistentItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can not equip non existent item", null, ((string[])(null)));
#line 184
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 185
 testRunner.When("I enter equip NotAItem", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("The entity NotAItem can not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GameIntegrationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GameIntegrationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
